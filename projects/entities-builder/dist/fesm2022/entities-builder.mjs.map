{"version":3,"file":"entities-builder.mjs","sources":["../../schematics/entity-crud/index.ts","../../public_api.ts","../../entities-builder.ts"],"sourcesContent":["import { Tree, Rule, apply, url, applyTemplates, move, chain, mergeWith, SchematicContext } from '@angular-devkit/schematics';\r\nimport { strings, normalize } from '@angular-devkit/core';\r\nimport { EntityBuilderSchema } from './entity-builder';\r\nimport { Options } from './options';\r\n\r\n\r\nexport function entityCrudGenerator(options: Options): Rule {\r\n\r\n  return (tree: Tree, context: SchematicContext) => {\r\n\r\n    let entity;\r\n    if(options.file) {\r\n      const name = options.name.toLowerCase();\r\n      entity = tree.readJson('src\\\\app\\\\entities-schemas\\\\'+ strings.dasherize(name) +'.json') as any;\r\n    }\r\n\r\n    if(options.entity) {\r\n      entity = JSON.parse(options.entity);\r\n    }\r\n\r\n\r\n    // entity['entitySchema'] = entity.fields;\r\n    // entity['label'] = entity.label;\r\n    // entity['searchableList'] = entity.searchableList;\r\n    entity = checkForRelatedEntities(tree, entity);\r\n    checkNewRoute(tree, entity);\r\n    checkMenu(tree, entity);\r\n\r\n\r\n    const templateSource = apply(url('./files'), [\r\n      applyTemplates({\r\n        classify: strings.classify,\r\n        dasherize: strings.dasherize,\r\n        capitalize: strings.capitalize,\r\n        camelize: strings.camelize,\r\n        labelize: labelize,\r\n        pluralizeSpanish: pluralizeSpanish,\r\n        pluralize: pluralize,\r\n        name: entity.name,\r\n        label: entity.label,\r\n        searchableList: entity.searchableList,\r\n        entity\r\n      }),\r\n      move(normalize(`/${entity.frontend_path}/${pluralize(strings.dasherize(entity.name))}`))\r\n    ]);\r\n\r\n\r\n    return chain([\r\n      mergeWith(templateSource),\r\n    ])(tree, context);\r\n  }\r\n}\r\n\r\n\r\nfunction checkForRelatedEntities(tree: Tree, entity: EntityBuilderSchema): EntityBuilderSchema {\r\n  entity.fields = entity.fields.map((field) => {\r\n    if(field.inputType === 'relatedSelect') {\r\n\r\n      const entityName = field.relationshipProperties?.entity as string;\r\n\r\n      // search recursively in the entities folder for the entity\r\n      let relatedEntityPath = ''\r\n      tree.getDir('src').visit((path) => {\r\n        if(path.includes(pluralize(entityName)) && relatedEntityPath === '') {\r\n          relatedEntityPath = path;\r\n        }\r\n      });\r\n      relatedEntityPath = relatedEntityPath.replace(entityName+'.ts', '').replace('/src/', '');\r\n      return {\r\n        ...field,\r\n        relatedEntityPath,\r\n        relatedEntityName: strings.capitalize(entityName)\r\n      }\r\n    }\r\n    return field\r\n  }) as any;\r\n\r\n  return entity;\r\n}\r\n\r\nfunction checkNewRoute(tree: Tree, entity: EntityBuilderSchema): void{\r\n   // Add simple route inside app.routing.ts\r\n\r\n   const routingModule = tree.read('src\\\\app\\\\app.routes.ts');\r\n\r\n   const routingModuleContent = (routingModule as any).toString();\r\n\r\n   // Remove the first path, example: if string is 'src/app', remove 'src/'\r\n   const routeBasePath = entity.frontend_path.replace(/.*\\//, '');\r\n   if (!routingModuleContent.includes(`path: '${strings.dasherize(pluralize(entity.label))}',`)) {\r\n     const newRoutingModuleContent = routingModuleContent.replace('/* Add new routes here */',\r\n       `/* Add new routes here */\r\n         { path: '${strings.dasherize(pluralize(entity.label))}', loadChildren: () => import('${routeBasePath}/${pluralize(strings.dasherize(entity.name))}/${pluralize(strings.dasherize(entity.name))}.module').then(m => m.${strings.classify(pluralize(entity.name))}Module) },\r\n       `\r\n     );\r\n     tree.overwrite('src\\\\app\\\\app.routes.ts', newRoutingModuleContent);\r\n   }\r\n}\r\n\r\nfunction checkMenu(tree: Tree, options: EntityBuilderSchema): void {\r\n  // Get file in src\\app\\mock-api\\common\\navigation\\data.ts\r\n  const navigationFile = tree.read('src\\\\app\\\\mock-api\\\\common\\\\navigation\\\\data.ts');\r\n\r\n  // Check if file includes \"id   : 'example',\"\r\n\r\n  if (navigationFile && !navigationFile.toString().includes(`id   : '${strings.dasherize(pluralize(options.name))}',`)) {\r\n\r\n    const navigationFileContent = navigationFile.toString();\r\n    const newNavigationFileContent = navigationFileContent.replace('/* Add new menu items here */',\r\n      `{\r\n          id   : '${strings.dasherize(pluralize(options.name))}',\r\n          title: '${strings.capitalize(pluralize(options.label))}',\r\n          type : 'basic',\r\n          // icon : 'email',\r\n          link  : '/${strings.dasherize(pluralize(options.label))}'\r\n       },\r\n\r\n        /* Add new menu items here */\r\n      `\r\n    );\r\n    tree.overwrite('src\\\\app\\\\mock-api\\\\common\\\\navigation\\\\data.ts', newNavigationFileContent);\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction pluralize(word: string): string {\r\n  return word + 's';\r\n}\r\n\r\n// Make kebab case but sapce instead of underscore and first letter in uppercase\r\nfunction labelize(word: string): string {\r\n  word = strings.dasherize(word);\r\n  return word.replace(/([a-z])([A-Z])/g, '$1 $2')\r\n    .replace(/\\s+/g, '-')\r\n    .toLowerCase();\r\n}\r\n\r\n\r\nfunction pluralizeSpanish(word: string): string {\r\n  // If the word ends with a vocal, add an 's' at the end\r\n  if (word.endsWith('a') || word.endsWith('e') || word.endsWith('i') || word.endsWith('o') || word.endsWith('u')) {\r\n    return word + 's';\r\n  }\r\n\r\n  // If the word ends with a consonant, add an 'es' at the end\r\n  return word + 'es';\r\n}\r\n","/*\n * Public API Surface of entities-builder\n */\n\nexport * from './schematics/entity-crud/index';\nexport * from './schematics/entity-crud/options';\nexport * from './schematics/entity-crud/entity-builder';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;AAMM,SAAU,mBAAmB,CAAC,OAAgB,EAAA;AAElD,IAAA,OAAO,CAAC,IAAU,EAAE,OAAyB,KAAI;AAE/C,QAAA,IAAI,MAAM,CAAC;QACX,IAAG,OAAO,CAAC,IAAI,EAAE;YACf,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;AACxC,YAAA,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,8BAA8B,GAAE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,GAAE,OAAO,CAAQ,CAAC;AACjG,SAAA;QAED,IAAG,OAAO,CAAC,MAAM,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrC,SAAA;;;;AAMD,QAAA,MAAM,GAAG,uBAAuB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC/C,QAAA,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5B,QAAA,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAGxB,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;AAC3C,YAAA,cAAc,CAAC;gBACb,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,QAAQ,EAAE,OAAO,CAAC,QAAQ;AAC1B,gBAAA,QAAQ,EAAE,QAAQ;AAClB,gBAAA,gBAAgB,EAAE,gBAAgB;AAClC,gBAAA,SAAS,EAAE,SAAS;gBACpB,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,KAAK;gBACnB,cAAc,EAAE,MAAM,CAAC,cAAc;gBACrC,MAAM;aACP,CAAC;YACF,IAAI,CAAC,SAAS,CAAC,CAAA,CAAA,EAAI,MAAM,CAAC,aAAa,IAAI,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAE,CAAA,CAAC,CAAC;AACzF,SAAA,CAAC,CAAC;AAGH,QAAA,OAAO,KAAK,CAAC;YACX,SAAS,CAAC,cAAc,CAAC;AAC1B,SAAA,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACpB,KAAC,CAAA;AACH,CAAC;AAGD,SAAS,uBAAuB,CAAC,IAAU,EAAE,MAA2B,EAAA;AACtE,IAAA,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAI;AAC1C,QAAA,IAAG,KAAK,CAAC,SAAS,KAAK,eAAe,EAAE;AAEtC,YAAA,MAAM,UAAU,GAAG,KAAK,CAAC,sBAAsB,EAAE,MAAgB,CAAC;;YAGlE,IAAI,iBAAiB,GAAG,EAAE,CAAA;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAI;AAChC,gBAAA,IAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,iBAAiB,KAAK,EAAE,EAAE;oBACnE,iBAAiB,GAAG,IAAI,CAAC;AAC1B,iBAAA;AACH,aAAC,CAAC,CAAC;AACH,YAAA,iBAAiB,GAAG,iBAAiB,CAAC,OAAO,CAAC,UAAU,GAAC,KAAK,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACzF,OAAO;AACL,gBAAA,GAAG,KAAK;gBACR,iBAAiB;AACjB,gBAAA,iBAAiB,EAAE,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC;aAClD,CAAA;AACF,SAAA;AACD,QAAA,OAAO,KAAK,CAAA;AACd,KAAC,CAAQ,CAAC;AAEV,IAAA,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,aAAa,CAAC,IAAU,EAAE,MAA2B,EAAA;;IAG3D,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAE3D,IAAA,MAAM,oBAAoB,GAAI,aAAqB,CAAC,QAAQ,EAAE,CAAC;;AAG/D,IAAA,MAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAC/D,IAAA,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAA,OAAA,EAAU,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA,EAAA,CAAI,CAAC,EAAE;AAC5F,QAAA,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,OAAO,CAAC,2BAA2B,EACtF,CAAA;oBACa,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,kCAAkC,aAAa,CAAA,CAAA,EAAI,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAI,CAAA,EAAA,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,yBAAyB,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;AAChQ,OAAA,CAAA,CACF,CAAC;AACF,QAAA,IAAI,CAAC,SAAS,CAAC,yBAAyB,EAAE,uBAAuB,CAAC,CAAC;AACpE,KAAA;AACJ,CAAC;AAED,SAAS,SAAS,CAAC,IAAU,EAAE,OAA4B,EAAA;;IAEzD,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;;IAIpF,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAW,QAAA,EAAA,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAI,EAAA,CAAA,CAAC,EAAE;AAEpH,QAAA,MAAM,qBAAqB,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC;AACxD,QAAA,MAAM,wBAAwB,GAAG,qBAAqB,CAAC,OAAO,CAAC,+BAA+B,EAC5F,CAAA;oBACc,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;oBAC1C,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;;;sBAG1C,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;;;;AAI1D,MAAA,CAAA,CACF,CAAC;AACF,QAAA,IAAI,CAAC,SAAS,CAAC,iDAAiD,EAAE,wBAAwB,CAAC,CAAC;AAC7F,KAAA;AAEH,CAAC;AAGD,SAAS,SAAS,CAAC,IAAY,EAAA;IAC7B,OAAO,IAAI,GAAG,GAAG,CAAC;AACpB,CAAC;AAED;AACA,SAAS,QAAQ,CAAC,IAAY,EAAA;AAC5B,IAAA,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC/B,IAAA,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC;AAC5C,SAAA,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;AACpB,SAAA,WAAW,EAAE,CAAC;AACnB,CAAC;AAGD,SAAS,gBAAgB,CAAC,IAAY,EAAA;;AAEpC,IAAA,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC9G,OAAO,IAAI,GAAG,GAAG,CAAC;AACnB,KAAA;;IAGD,OAAO,IAAI,GAAG,IAAI,CAAC;AACrB;;ACnJA;;AAEG;;ACFH;;AAEG;;;;"}
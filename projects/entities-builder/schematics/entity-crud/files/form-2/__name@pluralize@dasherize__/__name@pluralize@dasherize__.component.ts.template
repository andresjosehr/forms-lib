import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
// import { Client } from 'app/interfaces/entities/client';
import { ClientsService } from 'app/shared/services/clients/clients.service';
import { <%= classify(pluralize(name)) %>Service } from '../service/<%= dasherize(pluralize(name)) %>.service';
import { GlobalService } from 'app/shared/services/global/global.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';

<% for(let e in entity.fields) { %>
  <% if(entity.fields[e].input_type.name=='related') { %>
    import { <%= classify(pluralize(entity.fields[e].related_entity.name)) %>ListComponent } from 'app/forms-1/<%= dasherize(pluralize(entity.fields[e].related_entity.name)) %>/<%= dasherize(pluralize(entity.fields[e].related_entity.name)) %>-list/<%= dasherize(pluralize(entity.fields[e].related_entity.name)) %>-list.component';
  <% } %>
<% } %>

@Component({
  selector: 'app-<%= dasherize(pluralize(name)) %>',
  templateUrl: './<%= dasherize(pluralize(name)) %>.component.html'
})
export class <%= classify(pluralize(name)) %>Component implements OnInit {

    columns = [<% for(let e in entity.fields) { %><% if(entity.fields[e].visible) { %><% if(e!=0) { %>,<% } %> '<%=entity.fields[e].name%>'<% } %><% } %>, 'actions'];
    client;
    components = {
        <% for(let e in entity.fields) { %>
          <% if(entity.fields[e].input_type.name=='related') { %>
          '<%= camelize(entity.fields[e].related_entity.name) %>': {com: <%= classify(pluralize(entity.fields[e].related_entity.name)) %>ListComponent, col: <% let found = 0; for(let z in entity.fields[e].related_entity.fields) { %> <% if(entity.fields[e].related_entity.fields[z].visible && found==0) { %>'<%= entity.fields[e].related_entity.fields[z].name%>'<% } %><% found++; } %>},
          <% } %>
        <% } %>
    };

    formGroup: FormGroup;
    constructor(
        private _clientsService: ClientsService,
        private _globalService: GlobalService,
        private _matSnachBar: MatSnackBar,
        private _matDialog: MatDialog,
        private _formBuilder: FormBuilder,
        protected _service: <%= classify(pluralize(name)) %>Service,
    ) { }

    ngOnInit(): void {
        this.formGroup = this._formBuilder.group({
          id: [],
          client_id: [],
          <% for(let e in entity.fields) { %>
            <%= entity.fields[e].name %>: [], // <%= entity.fields[e].code %>
            <% if(entity.fields[e].input_type.name=='related') { %>
              <%= entity.fields[e].related_entity.name %>ToShow: [],
            <% } %>
          <% } %>
        });
    }


    selectEntity(entityName, fieldName) {
        const dialogRef = this._matDialog.open(this.components[entityName].com, {
            data: {
                isChild: true
            }
        });



        dialogRef.afterClosed().subscribe(result => {
            this.formGroup.get(fieldName).setValue(result[this.components[entityName].col]);
            this.formGroup.get(entityName).setValue(result.id);
        });
      }

      store(): void{

        this._service.store(this.formGroup.value).subscribe((response: any) => {

            this.formGroup.reset();

            this._globalService.openSnackBar(this._matSnachBar, response.message);
            this.selectClient(this.client);
        });
      }

      update(): void{

        this._service.update(this.formGroup.value.id, this.formGroup.value).subscribe((response: any) => {

            this.formGroup.reset();

            this._globalService.openSnackBar(this._matSnachBar, response.message);
            this.selectClient(this.client);
        });
      }

    selectClient(client){
        this.client = client;
        this.formGroup.reset();
        this.formGroup.get('client_id').setValue(client.id);
        this._clientsService.get(client.id).subscribe((response: any) => {
            this.client = response.data;
        });
    }

    delete(id: number): void{
        this._service.destroy(id).subscribe((response: any) => {
            this.client.<%= camelize(pluralize(name)) %> = this.client.<%= camelize(pluralize(name)) %>.filter((order) => order.id !== id);
            this._globalService.openSnackBar(this._matSnachBar, response.message);
        });
    }

    edit(id: string): void{
        this._service.get(id).subscribe((response: any) => {
            this.formGroup.patchValue(response.data);
            this.formGroup.get('car').setValue(response.data.car.name);
        });
    }

    getFileCounts(files: string): number{
    if(!files){
      return 0
    }
    return JSON.parse(files).length
  }
}


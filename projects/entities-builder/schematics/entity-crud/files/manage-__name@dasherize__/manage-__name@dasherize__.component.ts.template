import { Component, OnInit, Inject } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { ManageEntityComponent } from 'app/shared/generic-components/manage-entity/manage-entity.component';
import { GlobalService } from 'app/shared/services/global/global.service';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Subject } from 'rxjs';

import { <%= classify(name) %> } from '../<%= dasherize(name) %>';
import { <%= classify(name) %>Service } from '../service/<%= dasherize(name) %>.service';

<% for(let e of entity.fields) { %>
  <% if(e.inputType === 'relatedSelect') { %>
    import { <%= e.relatedEntityName %>Service } from '<%= e.relatedEntityPath %>service/<%= dasherize(e.relatedEntityName) %>.service';
  <% } %>
<% } %>

@Component({
  selector: 'app-manage-<%= dasherize(name) %>',
  templateUrl: './manage-<%= dasherize(name) %>.component.html',
})
export class Manage<%= classify(name) %>Component extends ManageEntityComponent<<%= classify(name) %>> implements OnInit {

    <%= camelize(name) %>FormGroup: FormGroup;
    <% for(let e of entity.fields) { %>
        <% if(e.inputType === 'relatedSelect') { %>
          <%= camelize(pluralize(e.relatedEntityName)) %>: any[] = [];
        <% } %>
      <% } %>

    constructor(
      protected _globalService: GlobalService,
		  protected _activateRoute: ActivatedRoute,
		  protected _formBuilder: FormBuilder,
		  protected _router: Router,
      protected _matSnackBar: MatSnackBar,
      protected _service: <%= classify(name) %>Service,
      @Inject(MAT_DIALOG_DATA) public data: {id: string | null, requestEvent: Subject<boolean>},
      <% for(let e of entity.fields) { %>
        <% if(e.inputType === 'relatedSelect') { %>
          protected _<%= camelize(e.relatedEntityName) %>Service: <%= e.relatedEntityName %>Service
        <% } %>
      <% } %>
    ) {
        const entityFormGroup = _formBuilder.group({
          <% for(let e in entity.fields) { %> <% if(entity.fields[e].editable) { %>
            <%= entity.fields[e].name %>: [<%= entity.fields[e]?.validations_string %>], // <%= entity.fields[e].code %>
          <% } %><% } %>
        });
        super(_globalService, _activateRoute, _formBuilder, _router, _matSnackBar, entityFormGroup, _service, data, '<%= pluralizeSpanish(label) %>', '<%= label %>');
    }

    ngOnInit(): void {

      this.afterRequest.subscribe((response) => {
        this.data.requestEvent.next(true);
      });

      <% for(let e of entity.fields) { %>
        <% if(e.inputType === 'relatedSelect') { %>
          this.getAll<%= pluralize(classify(e.relatedEntityName)) %>();
        <% } %>
      <% } %>
    }

    <% for(let e of entity.fields) { %>
      <% if(e.inputType === 'relatedSelect') { %>
        getAll<%= pluralize(classify(e.relatedEntityName)) %>() {
          this._<%= camelize(e.relatedEntityName) %>Service.getAll().subscribe(
            (response) => {
              this.<%= camelize(pluralize(e.relatedEntityName)) %> = response.data;
            },
            (error) => {
              this._globalService.openSnackBar('Error al obtener <%= pluralizeSpanish(e.relatedEntityName) %>', 3000,'error');
            }
          );
        }
      <% } %>
    <% } %>
}
